{"version":3,"file":"urql-exchange-graphcache-default-storage.js","sources":["../src/default-storage/index.ts"],"sourcesContent":["import { SerializedEntries, SerializedRequest, StorageAdapter } from '../types';\n\nconst getRequestPromise = <T>(request: IDBRequest<T>): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(request.error);\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nconst getTransactionPromise = (transaction: IDBTransaction): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    transaction.onerror = () => {\n      reject(transaction.error);\n    };\n\n    transaction.oncomplete = resolve;\n  });\n};\n\nexport interface StorageOptions {\n  idbName?: string;\n  maxAge?: number;\n}\n\nexport interface DefaultStorage extends StorageAdapter {\n  clear(): Promise<any>;\n}\n\nexport const makeDefaultStorage = (opts?: StorageOptions): DefaultStorage => {\n  if (!opts) opts = {};\n\n  let callback: (() => void) | undefined;\n\n  const DB_NAME = opts.idbName || 'graphcache-v4';\n  const ENTRIES_STORE_NAME = 'entries';\n  const METADATA_STORE_NAME = 'metadata';\n\n  let batch: Record<string, string | undefined> = Object.create(null);\n  const timestamp = Math.floor(new Date().valueOf() / (1000 * 60 * 60 * 24));\n  const maxAge = timestamp - (opts.maxAge || 7);\n\n  const req = indexedDB.open(DB_NAME, 1);\n  const database$ = getRequestPromise(req);\n\n  req.onupgradeneeded = () => {\n    req.result.createObjectStore(ENTRIES_STORE_NAME);\n    req.result.createObjectStore(METADATA_STORE_NAME);\n  };\n\n  const serializeEntry = (entry: string): string => entry.replace(/:/g, '%3a');\n\n  const deserializeEntry = (entry: string): string =>\n    entry.replace(/%3a/g, ':');\n\n  const serializeBatch = (): string => {\n    let data = '';\n    for (const key in batch) {\n      const value = batch[key];\n      data += serializeEntry(key);\n      data += ':';\n      if (value) data += serializeEntry(value);\n      data += ':';\n    }\n\n    return data;\n  };\n\n  const deserializeBatch = (input: string) => {\n    const data = {};\n    let char = '',\n      key = '',\n      entry = '',\n      mode = 0,\n      index = 0;\n\n    while (index < input.length) {\n      entry = '';\n      while ((char = input[index++]) !== ':' && char) {\n        entry += char;\n      }\n\n      if (mode) {\n        data[key] = deserializeEntry(entry) || undefined;\n        mode = 0;\n      } else {\n        key = deserializeEntry(entry);\n        mode = 1;\n      }\n    }\n\n    return data;\n  };\n\n  return {\n    clear() {\n      return database$.then(database => {\n        const transaction = database.transaction(\n          [METADATA_STORE_NAME, ENTRIES_STORE_NAME],\n          'readwrite'\n        );\n        transaction.objectStore(METADATA_STORE_NAME).clear();\n        transaction.objectStore(ENTRIES_STORE_NAME).clear();\n        batch = Object.create(null);\n        return getTransactionPromise(transaction);\n      });\n    },\n\n    readMetadata(): Promise<null | SerializedRequest[]> {\n      return database$.then(\n        database => {\n          return getRequestPromise<SerializedRequest[]>(\n            database\n              .transaction(METADATA_STORE_NAME, 'readonly')\n              .objectStore(METADATA_STORE_NAME)\n              .get(METADATA_STORE_NAME)\n          );\n        },\n        () => null\n      );\n    },\n\n    writeMetadata(metadata: SerializedRequest[]) {\n      database$.then(\n        database => {\n          return getRequestPromise(\n            database\n              .transaction(METADATA_STORE_NAME, 'readwrite')\n              .objectStore(METADATA_STORE_NAME)\n              .put(metadata, METADATA_STORE_NAME)\n          );\n        },\n        () => {\n          /* noop */\n        }\n      );\n    },\n\n    writeData(entries: SerializedEntries): Promise<void> {\n      Object.assign(batch, entries);\n      const toUndefined = () => undefined;\n\n      return database$\n        .then(database => {\n          return getRequestPromise(\n            database\n              .transaction(ENTRIES_STORE_NAME, 'readwrite')\n              .objectStore(ENTRIES_STORE_NAME)\n              .put(serializeBatch(), timestamp)\n          );\n        })\n        .then(toUndefined, toUndefined);\n    },\n\n    readData(): Promise<SerializedEntries> {\n      const chunks: string[] = [];\n      return database$\n        .then(database => {\n          const transaction = database.transaction(\n            ENTRIES_STORE_NAME,\n            'readwrite'\n          );\n\n          const store = transaction.objectStore(ENTRIES_STORE_NAME);\n          const request = (store.openKeyCursor || store.openCursor).call(store);\n\n          request.onsuccess = function () {\n            if (this.result) {\n              const { key } = this.result;\n              if (typeof key !== 'number' || key < maxAge) {\n                store.delete(key);\n              } else {\n                const request = store.get(key);\n                const index = chunks.length;\n                chunks.push('');\n                request.onsuccess = () => {\n                  const result = '' + request.result;\n                  if (key === timestamp)\n                    Object.assign(batch, deserializeBatch(result));\n                  chunks[index] = result;\n                };\n              }\n\n              this.result.continue();\n            }\n          };\n\n          return getTransactionPromise(transaction);\n        })\n        .then(\n          () => deserializeBatch(chunks.join('')),\n          () => batch\n        );\n    },\n\n    onOnline(cb: () => void) {\n      if (callback) {\n        window.removeEventListener('online', callback);\n        callback = undefined;\n      }\n\n      window.addEventListener(\n        'online',\n        (callback = () => {\n          cb();\n        })\n      );\n    },\n  };\n};\n"],"names":["getRequestPromise","request","onerror","reject","error","onsuccess","resolve","result","getTransactionPromise","transaction","oncomplete","makeDefaultStorage","opts","callback","DB_NAME","idbName","database$","req","onupgradeneeded","createObjectStore","ENTRIES_STORE_NAME","METADATA_STORE_NAME","serializeEntry","entry","replace","deserializeEntry","key","batch","value","data","deserializeBatch","input","char","mode","index","length","then","database","Object","create","get","writeMetadata","metadata","put","writeData","entries","assign","toUndefined","undefined","serializeBatch","timestamp","store","openKeyCursor","openCursor","call","delete","chunks","push","continue","join","onOnline","cb","window","removeEventListener"],"mappings":"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"}