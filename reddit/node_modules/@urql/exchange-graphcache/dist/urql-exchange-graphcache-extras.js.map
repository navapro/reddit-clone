{"version":3,"file":"urql-exchange-graphcache-extras.js","sources":["../src/extras/relayPagination.ts","../src/extras/simplePagination.ts"],"sourcesContent":["import { stringifyVariables } from '@urql/core';\nimport { Cache, Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'outwards' | 'inwards';\n\nexport interface PaginationParams {\n  mergeMode?: MergeMode;\n}\n\ninterface PageInfo {\n  __typename: string;\n  endCursor: null | string;\n  startCursor: null | string;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n}\n\ninterface Page {\n  __typename: string;\n  edges: NullArray<string>;\n  nodes: NullArray<string>;\n  pageInfo: PageInfo;\n}\n\nconst defaultPageInfo: PageInfo = {\n  __typename: 'PageInfo',\n  endCursor: null,\n  startCursor: null,\n  hasNextPage: false,\n  hasPreviousPage: false,\n};\n\nconst ensureKey = (x: any): string | null => (typeof x === 'string' ? x : null);\n\nconst concatEdges = (\n  cache: Cache,\n  leftEdges: NullArray<string>,\n  rightEdges: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftEdges.length; i < l; i++) {\n    const edge = leftEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newEdges = leftEdges.slice();\n  for (let i = 0, l = rightEdges.length; i < l; i++) {\n    const edge = rightEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newEdges.push(edge);\n    }\n  }\n\n  return newEdges;\n};\n\nconst concatNodes = (\n  leftNodes: NullArray<string>,\n  rightNodes: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftNodes.length; i < l; i++) {\n    const node = leftNodes[i];\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newNodes = leftNodes.slice();\n  for (let i = 0, l = rightNodes.length; i < l; i++) {\n    const node = rightNodes[i];\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newNodes.push(node);\n    }\n  }\n\n  return newNodes;\n};\n\nconst compareArgs = (\n  fieldArgs: Variables,\n  connectionArgs: Variables\n): boolean => {\n  for (const key in connectionArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    } else if (!(key in fieldArgs)) {\n      return false;\n    }\n\n    const argA = fieldArgs[key];\n    const argB = connectionArgs[key];\n\n    if (\n      typeof argA !== typeof argB || typeof argA !== 'object'\n        ? argA !== argB\n        : stringifyVariables(argA) !== stringifyVariables(argB)\n    ) {\n      return false;\n    }\n  }\n\n  for (const key in fieldArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    }\n\n    if (!(key in connectionArgs)) return false;\n  }\n\n  return true;\n};\n\nconst getPage = (\n  cache: Cache,\n  entityKey: string,\n  fieldKey: string\n): Page | null => {\n  const link = ensureKey(cache.resolve(entityKey, fieldKey));\n  if (!link) return null;\n\n  const typename = cache.resolve(link, '__typename') as string;\n  const edges = (cache.resolve(link, 'edges') || []) as NullArray<string>;\n  const nodes = (cache.resolve(link, 'nodes') || []) as NullArray<string>;\n  if (typeof typename !== 'string') {\n    return null;\n  }\n\n  const page: Page = {\n    __typename: typename,\n    edges,\n    nodes,\n    pageInfo: defaultPageInfo,\n  };\n\n  const pageInfoKey = cache.resolve(link, 'pageInfo');\n  if (typeof pageInfoKey === 'string') {\n    const pageInfoType = ensureKey(cache.resolve(pageInfoKey, '__typename'));\n    const endCursor = ensureKey(cache.resolve(pageInfoKey, 'endCursor'));\n    const startCursor = ensureKey(cache.resolve(pageInfoKey, 'startCursor'));\n    const hasNextPage = cache.resolve(pageInfoKey, 'hasNextPage');\n    const hasPreviousPage = cache.resolve(pageInfoKey, 'hasPreviousPage');\n\n    const pageInfo: PageInfo = (page.pageInfo = {\n      __typename: typeof pageInfoType === 'string' ? pageInfoType : 'PageInfo',\n      hasNextPage: typeof hasNextPage === 'boolean' ? hasNextPage : !!endCursor,\n      hasPreviousPage:\n        typeof hasPreviousPage === 'boolean' ? hasPreviousPage : !!startCursor,\n      endCursor,\n      startCursor,\n    });\n\n    if (pageInfo.endCursor === null) {\n      const edge = edges[edges.length - 1] as string | null;\n      if (edge) {\n        const endCursor = cache.resolve(edge, 'cursor');\n        pageInfo.endCursor = ensureKey(endCursor);\n      }\n    }\n\n    if (pageInfo.startCursor === null) {\n      const edge = edges[0] as string | null;\n      if (edge) {\n        const startCursor = cache.resolve(edge, 'cursor');\n        pageInfo.startCursor = ensureKey(startCursor);\n      }\n    }\n  }\n\n  return page;\n};\n\nexport const relayPagination = (\n  params: PaginationParams = {}\n): Resolver<any, any, any> => {\n  const mergeMode = params.mergeMode || 'inwards';\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    let typename: string | null = null;\n    let startEdges: NullArray<string> = [];\n    let endEdges: NullArray<string> = [];\n    let startNodes: NullArray<string> = [];\n    let endNodes: NullArray<string> = [];\n    let pageInfo: PageInfo = { ...defaultPageInfo };\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const page = getPage(cache, entityKey, fieldKey);\n      if (page === null) {\n        continue;\n      }\n      if (page.nodes.length === 0 && page.edges.length === 0 && typename) {\n        continue;\n      }\n\n      if (\n        mergeMode === 'inwards' &&\n        typeof args.last === 'number' &&\n        typeof args.first === 'number'\n      ) {\n        const firstEdges = page.edges.slice(0, args.first + 1);\n        const lastEdges = page.edges.slice(-args.last);\n        const firstNodes = page.nodes.slice(0, args.first + 1);\n        const lastNodes = page.nodes.slice(-args.last);\n\n        startEdges = concatEdges(cache, startEdges, firstEdges);\n        endEdges = concatEdges(cache, lastEdges, endEdges);\n        startNodes = concatNodes(startNodes, firstNodes);\n        endNodes = concatNodes(lastNodes, endNodes);\n\n        pageInfo = page.pageInfo;\n      } else if (args.after) {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo.endCursor = page.pageInfo.endCursor;\n        pageInfo.hasNextPage = page.pageInfo.hasNextPage;\n      } else if (args.before) {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo.startCursor = page.pageInfo.startCursor;\n        pageInfo.hasPreviousPage = page.pageInfo.hasPreviousPage;\n      } else if (typeof args.last === 'number') {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo = page.pageInfo;\n      } else {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo = page.pageInfo;\n      }\n\n      if (page.pageInfo.__typename !== pageInfo.__typename)\n        pageInfo.__typename = page.pageInfo.__typename;\n      if (typename !== page.__typename) typename = page.__typename;\n    }\n\n    if (typeof typename !== 'string') {\n      return undefined;\n    }\n\n    const hasCurrentPage = !!ensureKey(\n      cache.resolve(entityKey, fieldName, fieldArgs)\n    );\n    if (!hasCurrentPage) {\n      if (!(info as any).store.schema) {\n        return undefined;\n      } else {\n        info.partial = true;\n      }\n    }\n\n    return {\n      __typename: typename,\n      edges:\n        mergeMode === 'inwards'\n          ? concatEdges(cache, startEdges, endEdges)\n          : concatEdges(cache, endEdges, startEdges),\n      nodes:\n        mergeMode === 'inwards'\n          ? concatNodes(startNodes, endNodes)\n          : concatNodes(endNodes, startNodes),\n      pageInfo: {\n        __typename: pageInfo.__typename,\n        endCursor: pageInfo.endCursor,\n        startCursor: pageInfo.startCursor,\n        hasNextPage: pageInfo.hasNextPage,\n        hasPreviousPage: pageInfo.hasPreviousPage,\n      },\n    };\n  };\n};\n","import { stringifyVariables } from '@urql/core';\nimport { Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'before' | 'after';\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n  mergeMode?: MergeMode;\n}\n\nexport const simplePagination = ({\n  offsetArgument = 'skip',\n  limitArgument = 'limit',\n  mergeMode = 'after',\n}: PaginationParams = {}): Resolver<any, any, any> => {\n  const compareArgs = (\n    fieldArgs: Variables,\n    connectionArgs: Variables\n  ): boolean => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      const argA = fieldArgs[key];\n      const argB = connectionArgs[key];\n\n      if (\n        typeof argA !== typeof argB || typeof argA !== 'object'\n          ? argA !== argB\n          : stringifyVariables(argA) !== stringifyVariables(argB)\n      ) {\n        return false;\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      }\n      if (!(key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const visited = new Set();\n    let result: NullArray<string> = [];\n    let prevOffset: number | null = null;\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const links = cache.resolve(entityKey, fieldKey) as string[];\n      const currentOffset = args[offsetArgument];\n\n      if (\n        links === null ||\n        links.length === 0 ||\n        typeof currentOffset !== 'number'\n      ) {\n        continue;\n      }\n\n      const tempResult: NullArray<string> = [];\n\n      for (let j = 0; j < links.length; j++) {\n        const link = links[j];\n        if (visited.has(link)) continue;\n        tempResult.push(link);\n        visited.add(link);\n      }\n\n      if (\n        (!prevOffset || currentOffset > prevOffset) ===\n        (mergeMode === 'after')\n      ) {\n        result = [...result, ...tempResult];\n      } else {\n        result = [...tempResult, ...result];\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    if (hasCurrentPage) {\n      return result;\n    } else if (!(info as any).store.schema) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\n"],"names":["defaultPageInfo","__typename","endCursor","startCursor","hasNextPage","hasPreviousPage","ensureKey","x","concatEdges","cache","leftEdges","rightEdges","ids","Set","i","l","length","edge","add","node","newEdges","slice","has","push","concatNodes","leftNodes","rightNodes","newNodes","compareArgs","fieldArgs","connectionArgs","key","argA","argB","getPage","entityKey","fieldKey","link","resolve","edges","nodes","typename","page","pageInfo","pageInfoKey","pageInfoType","relayPagination","params","mergeMode","fieldInfos","allFields","filter","info","fieldName","size","undefined","arguments","args","last","first","firstEdges","lastEdges","firstNodes","lastNodes","startNodes","endNodes","hasCurrentPage","store","schema","partial","simplePagination","offsetArgument","limitArgument","visited","currentOffset","j","links","tempResult","prevOffset","result"],"mappings":"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"}