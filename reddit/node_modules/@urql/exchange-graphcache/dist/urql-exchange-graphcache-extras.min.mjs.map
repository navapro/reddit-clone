{"version":3,"file":"urql-exchange-graphcache-extras.min.mjs","sources":["../src/extras/relayPagination.ts","../src/extras/simplePagination.ts"],"sourcesContent":["import { stringifyVariables } from '@urql/core';\nimport { Cache, Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'outwards' | 'inwards';\n\nexport interface PaginationParams {\n  mergeMode?: MergeMode;\n}\n\ninterface PageInfo {\n  __typename: string;\n  endCursor: null | string;\n  startCursor: null | string;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n}\n\ninterface Page {\n  __typename: string;\n  edges: NullArray<string>;\n  nodes: NullArray<string>;\n  pageInfo: PageInfo;\n}\n\nconst defaultPageInfo: PageInfo = {\n  __typename: 'PageInfo',\n  endCursor: null,\n  startCursor: null,\n  hasNextPage: false,\n  hasPreviousPage: false,\n};\n\nconst ensureKey = (x: any): string | null => (typeof x === 'string' ? x : null);\n\nconst concatEdges = (\n  cache: Cache,\n  leftEdges: NullArray<string>,\n  rightEdges: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftEdges.length; i < l; i++) {\n    const edge = leftEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newEdges = leftEdges.slice();\n  for (let i = 0, l = rightEdges.length; i < l; i++) {\n    const edge = rightEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newEdges.push(edge);\n    }\n  }\n\n  return newEdges;\n};\n\nconst concatNodes = (\n  leftNodes: NullArray<string>,\n  rightNodes: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftNodes.length; i < l; i++) {\n    const node = leftNodes[i];\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newNodes = leftNodes.slice();\n  for (let i = 0, l = rightNodes.length; i < l; i++) {\n    const node = rightNodes[i];\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newNodes.push(node);\n    }\n  }\n\n  return newNodes;\n};\n\nconst compareArgs = (\n  fieldArgs: Variables,\n  connectionArgs: Variables\n): boolean => {\n  for (const key in connectionArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    } else if (!(key in fieldArgs)) {\n      return false;\n    }\n\n    const argA = fieldArgs[key];\n    const argB = connectionArgs[key];\n\n    if (\n      typeof argA !== typeof argB || typeof argA !== 'object'\n        ? argA !== argB\n        : stringifyVariables(argA) !== stringifyVariables(argB)\n    ) {\n      return false;\n    }\n  }\n\n  for (const key in fieldArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    }\n\n    if (!(key in connectionArgs)) return false;\n  }\n\n  return true;\n};\n\nconst getPage = (\n  cache: Cache,\n  entityKey: string,\n  fieldKey: string\n): Page | null => {\n  const link = ensureKey(cache.resolve(entityKey, fieldKey));\n  if (!link) return null;\n\n  const typename = cache.resolve(link, '__typename') as string;\n  const edges = (cache.resolve(link, 'edges') || []) as NullArray<string>;\n  const nodes = (cache.resolve(link, 'nodes') || []) as NullArray<string>;\n  if (typeof typename !== 'string') {\n    return null;\n  }\n\n  const page: Page = {\n    __typename: typename,\n    edges,\n    nodes,\n    pageInfo: defaultPageInfo,\n  };\n\n  const pageInfoKey = cache.resolve(link, 'pageInfo');\n  if (typeof pageInfoKey === 'string') {\n    const pageInfoType = ensureKey(cache.resolve(pageInfoKey, '__typename'));\n    const endCursor = ensureKey(cache.resolve(pageInfoKey, 'endCursor'));\n    const startCursor = ensureKey(cache.resolve(pageInfoKey, 'startCursor'));\n    const hasNextPage = cache.resolve(pageInfoKey, 'hasNextPage');\n    const hasPreviousPage = cache.resolve(pageInfoKey, 'hasPreviousPage');\n\n    const pageInfo: PageInfo = (page.pageInfo = {\n      __typename: typeof pageInfoType === 'string' ? pageInfoType : 'PageInfo',\n      hasNextPage: typeof hasNextPage === 'boolean' ? hasNextPage : !!endCursor,\n      hasPreviousPage:\n        typeof hasPreviousPage === 'boolean' ? hasPreviousPage : !!startCursor,\n      endCursor,\n      startCursor,\n    });\n\n    if (pageInfo.endCursor === null) {\n      const edge = edges[edges.length - 1] as string | null;\n      if (edge) {\n        const endCursor = cache.resolve(edge, 'cursor');\n        pageInfo.endCursor = ensureKey(endCursor);\n      }\n    }\n\n    if (pageInfo.startCursor === null) {\n      const edge = edges[0] as string | null;\n      if (edge) {\n        const startCursor = cache.resolve(edge, 'cursor');\n        pageInfo.startCursor = ensureKey(startCursor);\n      }\n    }\n  }\n\n  return page;\n};\n\nexport const relayPagination = (\n  params: PaginationParams = {}\n): Resolver<any, any, any> => {\n  const mergeMode = params.mergeMode || 'inwards';\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    let typename: string | null = null;\n    let startEdges: NullArray<string> = [];\n    let endEdges: NullArray<string> = [];\n    let startNodes: NullArray<string> = [];\n    let endNodes: NullArray<string> = [];\n    let pageInfo: PageInfo = { ...defaultPageInfo };\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const page = getPage(cache, entityKey, fieldKey);\n      if (page === null) {\n        continue;\n      }\n      if (page.nodes.length === 0 && page.edges.length === 0 && typename) {\n        continue;\n      }\n\n      if (\n        mergeMode === 'inwards' &&\n        typeof args.last === 'number' &&\n        typeof args.first === 'number'\n      ) {\n        const firstEdges = page.edges.slice(0, args.first + 1);\n        const lastEdges = page.edges.slice(-args.last);\n        const firstNodes = page.nodes.slice(0, args.first + 1);\n        const lastNodes = page.nodes.slice(-args.last);\n\n        startEdges = concatEdges(cache, startEdges, firstEdges);\n        endEdges = concatEdges(cache, lastEdges, endEdges);\n        startNodes = concatNodes(startNodes, firstNodes);\n        endNodes = concatNodes(lastNodes, endNodes);\n\n        pageInfo = page.pageInfo;\n      } else if (args.after) {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo.endCursor = page.pageInfo.endCursor;\n        pageInfo.hasNextPage = page.pageInfo.hasNextPage;\n      } else if (args.before) {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo.startCursor = page.pageInfo.startCursor;\n        pageInfo.hasPreviousPage = page.pageInfo.hasPreviousPage;\n      } else if (typeof args.last === 'number') {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo = page.pageInfo;\n      } else {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo = page.pageInfo;\n      }\n\n      if (page.pageInfo.__typename !== pageInfo.__typename)\n        pageInfo.__typename = page.pageInfo.__typename;\n      if (typename !== page.__typename) typename = page.__typename;\n    }\n\n    if (typeof typename !== 'string') {\n      return undefined;\n    }\n\n    const hasCurrentPage = !!ensureKey(\n      cache.resolve(entityKey, fieldName, fieldArgs)\n    );\n    if (!hasCurrentPage) {\n      if (!(info as any).store.schema) {\n        return undefined;\n      } else {\n        info.partial = true;\n      }\n    }\n\n    return {\n      __typename: typename,\n      edges:\n        mergeMode === 'inwards'\n          ? concatEdges(cache, startEdges, endEdges)\n          : concatEdges(cache, endEdges, startEdges),\n      nodes:\n        mergeMode === 'inwards'\n          ? concatNodes(startNodes, endNodes)\n          : concatNodes(endNodes, startNodes),\n      pageInfo: {\n        __typename: pageInfo.__typename,\n        endCursor: pageInfo.endCursor,\n        startCursor: pageInfo.startCursor,\n        hasNextPage: pageInfo.hasNextPage,\n        hasPreviousPage: pageInfo.hasPreviousPage,\n      },\n    };\n  };\n};\n","import { stringifyVariables } from '@urql/core';\nimport { Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'before' | 'after';\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n  mergeMode?: MergeMode;\n}\n\nexport const simplePagination = ({\n  offsetArgument = 'skip',\n  limitArgument = 'limit',\n  mergeMode = 'after',\n}: PaginationParams = {}): Resolver<any, any, any> => {\n  const compareArgs = (\n    fieldArgs: Variables,\n    connectionArgs: Variables\n  ): boolean => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      const argA = fieldArgs[key];\n      const argB = connectionArgs[key];\n\n      if (\n        typeof argA !== typeof argB || typeof argA !== 'object'\n          ? argA !== argB\n          : stringifyVariables(argA) !== stringifyVariables(argB)\n      ) {\n        return false;\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      }\n      if (!(key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const visited = new Set();\n    let result: NullArray<string> = [];\n    let prevOffset: number | null = null;\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const links = cache.resolve(entityKey, fieldKey) as string[];\n      const currentOffset = args[offsetArgument];\n\n      if (\n        links === null ||\n        links.length === 0 ||\n        typeof currentOffset !== 'number'\n      ) {\n        continue;\n      }\n\n      const tempResult: NullArray<string> = [];\n\n      for (let j = 0; j < links.length; j++) {\n        const link = links[j];\n        if (visited.has(link)) continue;\n        tempResult.push(link);\n        visited.add(link);\n      }\n\n      if (\n        (!prevOffset || currentOffset > prevOffset) ===\n        (mergeMode === 'after')\n      ) {\n        result = [...result, ...tempResult];\n      } else {\n        result = [...tempResult, ...result];\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    if (hasCurrentPage) {\n      return result;\n    } else if (!(info as any).store.schema) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\n"],"names":["__typename","endCursor","startCursor","hasNextPage","concatEdges","edge","leftEdges","i","rightEdges","ids","add","_node","node","_edge","Set","leftNodes","rightNodes","_node2","connectionArgs","key","argA","fieldArgs","_key","getPage","cache","resolve","fieldKey","link","ensureKey","typename","edges","defaultPageInfo","pageInfoKey","pageInfoType","hasPreviousPage","length","_edge2","mergeMode","params","info","fieldInfos","allFields","args","arguments","slice","last","firstEdges","page","lastEdges","nodes","firstNodes","startEdges","startNodes","lastNodes","endNodes","concatNodes","pageInfo","after","endEdges","partial","simplePagination","offsetArgument","limitArgument","compareArgs","visited","links","tempResult","push","result","prevOffset","currentOffset","store","schema"],"mappings":"uDAwBAA,sBACEA,eACAC,YAFF,KAGEC,aAAA,EACAC,iBAJF,kDAUAC,IAAAA,EAAAA,oCAOIC,EAAAC,UADFA,EAAAA,GACE,qFAMFC,EAAAC,EAAAA,wDAGEC,EAAAC,IAAAC,GACEF,EAAAG,KAAAC,4BAQN,UAAAC,gCAKEP,EAAAQ,EAAAA,GACE,iBAAAA,GAAAN,EAAAC,IAAAE,mDAKFL,EAAAS,EAAAA,kCAEEP,EAAAC,IAAAO,GACER,EAAAG,KAAAK,wBAQN,aAAAC,EAIE,GAAA,UAAAC,GAAA,YAAA,UAAAA,GAAA,WAAAA,EAAA,qBAQS,aAIPC,EAAAC,EAAAF,uFAYF,GAAA,UAAAG,GAAA,SAAAA,GAAA,UAAAA,GAAA,WAAAA,4CAgBFC,IAAAA,IAAAC,EAAAC,UAAAC,IAKE,IAAAC,EAAAC,OAAAA,KACA,IAAAC,EAAWL,UAAAG,EAAA,yCAGXG,EAAAN,EAAAC,QAAAE,EAAA,UAAA,yBAEA,OAAA,YAIA3B,WAAA6B,EACE7B,yBADF+B,GAAAC,EAAAR,EAAAC,QAAAE,EAAA,mCAQA,IAAAM,EAAAL,IAAAH,QAAAO,EAAA,eACEC,EAAAL,EAAAA,EAAAH,QAAAO,EAAA,cACA/B,EAAA2B,EAAAJ,EAAAC,QAAAO,EAAA,gBACA9B,EAAA0B,EAAAA,QAAAI,EAAA,yEAIA,mBAAAC,EAAA,WACEjC,YAAA,kBAAAiC,EAAA9B,IADFF,EAEEE,gBAAA,kBAAA+B,EAAAA,IAFFhC,EAGEgC,sDAMF7B,EAAAJ,EAAA6B,EAAAK,OAAA,SAEE,MAAAX,EAAAC,QAAApB,EAAA,yDAMF+B,EAAAN,EAAA,SAEE,MAAAN,EAAAC,QAAAW,EAAA,4DAUNC,WAAA,UAGE,SAAAC,EAAAd,EAAAe,sFAMEC,EAAAA,EAAAC,uFAcEf,EAAAA,UAAAgB,GAAAC,EAAAD,qLAeEE,MAAA,IAAAC,MAAA,GAGAC,EAAAC,EAAAjB,MAAAc,OAAAF,EAAAG,MACAG,EAAAD,EAAAE,MAAAL,MAAAF,EAAAA,EAAAG,MAAA,GACAK,EAAAH,EAAAE,MAAAL,OAAAF,EAAAG,MACAM,EAAA/C,EAAAoB,EAAA2B,EAAAL,uBAIAM,IAAAC,KACAC,EAAAC,EAAAC,cAEAd,EAAAe,sQAWKf,EAAAlB,EAAAuB,QAAAW,iCAIAP,EAAA/C,EAAAoB,EAAA2B,EAAAJ,EAAAjB,8NAqBAS,EAAAoB,SAAA,sBAMP3D,kBAAAA,2EASAwD,EAAAxD,+CAAAE,wDAAAgC,0BCnRN0B,iBAAAA,OAAAC,wBAAAC,YAAAA,SAAAzB,MAAA,IAAA0B,EAAA,CAAA1C,EAAAH,SAKE,IAAAC,KAAAD,EAIE,GAAAC,IAAA0C,GAAA1C,IAAA2C,EAAA,qBAGS,aAIP1C,EAAAC,EAAAF,uFAYF,GAAAG,IAAAuC,GAAAvC,IAAAwC,mIAcAtB,EAAAA,EAAAC,mCAMAuB,EAAA,oCAKEtC,EAAAA,UAAAgB,GAAAC,EAAAD,oIAkBA,IAAAf,EAAAsC,EAAAA,GACEtC,MAAAA,KACAuC,EAAAC,KAAAxC,GACAuC,MAAAC,IAIFC,2BAAAC,IAAAA,KAAAC,GAKO,IAAAJ,KAAAE,qCASPG,MAAAC,QAGKjC,EAAAoB,SAAA,EACLS,QALF"}